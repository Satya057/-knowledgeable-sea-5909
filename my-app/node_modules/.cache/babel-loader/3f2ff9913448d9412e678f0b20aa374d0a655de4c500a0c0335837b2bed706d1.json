{"ast":null,"code":"import { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { setTarget } from './setters.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nfunction animateVisualElement(visualElement, definition) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  visualElement.notify(\"AnimationStart\", definition);\n  let animation;\n  if (Array.isArray(definition)) {\n    const animations = definition.map(variant => animateVariant(visualElement, variant, options));\n    animation = Promise.all(animations);\n  } else if (typeof definition === \"string\") {\n    animation = animateVariant(visualElement, definition, options);\n  } else {\n    const resolvedDefinition = typeof definition === \"function\" ? resolveVariant(visualElement, definition, options.custom) : definition;\n    animation = animateTarget(visualElement, resolvedDefinition, options);\n  }\n  return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\nfunction animateVariant(visualElement, variant) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  const resolved = resolveVariant(visualElement, variant, options.custom);\n  let {\n    transition = visualElement.getDefaultTransition() || {}\n  } = resolved || {};\n  if (options.transitionOverride) {\n    transition = options.transitionOverride;\n  }\n  /**\n   * If we have a variant, create a callback that runs it as an animation.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n  const getAnimation = resolved ? () => animateTarget(visualElement, resolved, options) : () => Promise.resolve();\n  /**\n   * If we have children, create a callback that runs all their animations.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n  const getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size) ? function () {\n    let forwardDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const {\n      delayChildren = 0,\n      staggerChildren,\n      staggerDirection\n    } = transition;\n    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n  } : () => Promise.resolve();\n  /**\n   * If the transition explicitly defines a \"when\" option, we need to resolve either\n   * this animation or all children animations before playing the other.\n   */\n  const {\n    when\n  } = transition;\n  if (when) {\n    const [first, last] = when === \"beforeChildren\" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];\n    return first().then(last);\n  } else {\n    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n  }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = visualElement.makeTargetAnimatable(definition);\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && ((_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.getState()[type]);\n  for (const key in target) {\n    const value = visualElement.getValue(key);\n    const valueTarget = target[key];\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n    let valueTransition = {\n      delay,\n      ...transition\n    };\n    /**\n     * Make animation instant if this is a transform prop and we should reduce motion.\n     */\n    if (visualElement.shouldReduceMotion && transformProps.has(key)) {\n      valueTransition = {\n        ...valueTransition,\n        type: false,\n        delay: 0\n      };\n    }\n    let animation = startAnimation(key, value, valueTarget, valueTransition);\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation = animation.then(() => willChange.remove(key));\n    }\n    animations.push(animation);\n  }\n  return Promise.all(animations).then(() => {\n    transitionEnd && setTarget(visualElement, transitionEnd);\n  });\n}\nfunction animateChildren(visualElement, variant) {\n  let delayChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let staggerChildren = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let staggerDirection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let options = arguments.length > 5 ? arguments[5] : undefined;\n  const animations = [];\n  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n  const generateStaggerDuration = staggerDirection === 1 ? function () {\n    let i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return i * staggerChildren;\n  } : function () {\n    let i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return maxStaggerDuration - i * staggerChildren;\n  };\n  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {\n    animations.push(animateVariant(child, variant, {\n      ...options,\n      delay: delayChildren + generateStaggerDuration(i)\n    }).then(() => child.notify(\"AnimationComplete\", variant)));\n  });\n  return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n  visualElement.values.forEach(value => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n  return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };","map":{"version":3,"names":["startAnimation","setTarget","resolveVariant","transformProps","isWillChangeMotionValue","animateVisualElement","visualElement","definition","options","notify","animation","Array","isArray","animations","map","variant","animateVariant","Promise","all","resolvedDefinition","custom","animateTarget","then","_a","resolved","transition","getDefaultTransition","transitionOverride","getAnimation","resolve","getChildAnimations","variantChildren","size","forwardDelay","delayChildren","staggerChildren","staggerDirection","animateChildren","when","first","last","delay","type","transitionEnd","target","makeTargetAnimatable","willChange","getValue","animationTypeState","animationState","getState","key","value","valueTarget","undefined","shouldBlockAnimation","valueTransition","shouldReduceMotion","has","add","remove","push","maxStaggerDuration","generateStaggerDuration","i","from","sort","sortByTreeOrder","forEach","child","stopAnimation","values","stop","a","b","sortNodePosition","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty"],"sources":["C:/Users/nites/OneDrive/Desktop/-knowledgeable-sea-5909/my-app/node_modules/framer-motion/dist/es/render/utils/animation.mjs"],"sourcesContent":["import { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { setTarget } from './setters.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\nfunction animateVariant(visualElement, variant, options = {}) {\n    var _a;\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => animateTarget(visualElement, resolved, options)\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size)\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(last);\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type && ((_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.getState()[type]);\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        let valueTransition = { delay, ...transition };\n        /**\n         * Make animation instant if this is a transform prop and we should reduce motion.\n         */\n        if (visualElement.shouldReduceMotion && transformProps.has(key)) {\n            valueTransition = {\n                ...valueTransition,\n                type: false,\n                delay: 0,\n            };\n        }\n        let animation = startAnimation(key, value, valueTarget, valueTransition);\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation = animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}